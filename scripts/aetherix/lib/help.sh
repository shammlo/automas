#!/bin/bash

# Help Library - Interactive component descriptions and help system

# Get component description
get_component_description() {
    local component="$1"
    case "$component" in
        "docker") echo "üê≥ Docker - Containerization platform for packaging applications" ;;
        "nginx") echo "üï∏Ô∏è Nginx - High-performance web server and reverse proxy" ;;
        "psql") echo "üêò PostgreSQL - Advanced open-source relational database" ;;
        "zsh") echo "üêö Zsh - Modern shell with advanced features" ;;
        "vim") echo "üìù Vim - Powerful text editor for developers" ;;
        "apps") echo "üõ†Ô∏è Development Apps - Essential development tools" ;;
        "monitoring") echo "üìä Monitoring Tools - System performance monitoring" ;;
        "dev_env") echo "üíª Development Environment - Programming languages and tools" ;;
        "scripts") echo "üìú Development Scripts - Automation and utility scripts" ;;
        *) echo "Unknown component" ;;
    esac
}

# Get component benefits
get_component_benefits() {
    local component="$1"
    case "$component" in
        "docker") echo "‚Ä¢ Consistent environments across development/production
‚Ä¢ Easy application deployment and scaling
‚Ä¢ Isolated application dependencies
‚Ä¢ Simplified CI/CD workflows" ;;
        "nginx") echo "‚Ä¢ Fast static file serving
‚Ä¢ Load balancing capabilities
‚Ä¢ SSL/TLS termination
‚Ä¢ Reverse proxy for applications" ;;
        "psql") echo "‚Ä¢ ACID compliance and reliability
‚Ä¢ Advanced SQL features
‚Ä¢ JSON support for modern apps
‚Ä¢ Excellent performance and scalability" ;;
        "zsh") echo "‚Ä¢ Auto-completion and suggestions
‚Ä¢ Powerful theming system
‚Ä¢ Plugin ecosystem
‚Ä¢ Better scripting capabilities" ;;
        "vim") echo "‚Ä¢ Efficient text editing
‚Ä¢ Extensive plugin system
‚Ä¢ Works over SSH
‚Ä¢ Highly customizable" ;;
        "apps") echo "‚Ä¢ VS Code for modern development
‚Ä¢ Postman for API testing
‚Ä¢ PyCharm for Python development
‚Ä¢ Figma for design collaboration" ;;
        "monitoring") echo "‚Ä¢ Real-time system monitoring
‚Ä¢ Process management
‚Ä¢ Resource usage tracking
‚Ä¢ Performance optimization insights" ;;
        "dev_env") echo "‚Ä¢ Node.js for JavaScript development
‚Ä¢ Python for scripting and apps
‚Ä¢ Package managers (npm, pip)
‚Ä¢ Virtual environments for isolation" ;;
        "scripts") echo "‚Ä¢ Automated common tasks
‚Ä¢ Database management utilities
‚Ä¢ Nginx configuration helpers
‚Ä¢ Development workflow automation" ;;
        *) echo "No benefits information available" ;;
    esac
}

# Get component requirements
get_component_requirements() {
    local component="$1"
    case "$component" in
        "docker") echo "‚Ä¢ 4GB RAM minimum
‚Ä¢ 64-bit Linux kernel 3.10+
‚Ä¢ Internet connection for image downloads" ;;
        "nginx") echo "‚Ä¢ 512MB RAM minimum
‚Ä¢ Port 80/443 available
‚Ä¢ Basic networking knowledge helpful" ;;
        "psql") echo "‚Ä¢ 1GB RAM minimum for production
‚Ä¢ 100MB+ disk space
‚Ä¢ Understanding of SQL basics" ;;
        "zsh") echo "‚Ä¢ Basic terminal knowledge
‚Ä¢ 50MB disk space
‚Ä¢ Compatible with bash scripts" ;;
        "vim") echo "‚Ä¢ Learning curve investment
‚Ä¢ 30MB disk space
‚Ä¢ Basic text editing knowledge" ;;
        "apps") echo "‚Ä¢ 4GB RAM minimum
‚Ä¢ 2GB+ disk space
‚Ä¢ GUI desktop environment" ;;
        "monitoring") echo "‚Ä¢ Minimal system impact
‚Ä¢ 100MB disk space
‚Ä¢ Basic system administration knowledge" ;;
        "dev_env") echo "‚Ä¢ 2GB RAM minimum
‚Ä¢ 1GB+ disk space
‚Ä¢ Programming knowledge helpful" ;;
        "scripts") echo "‚Ä¢ Basic scripting knowledge
‚Ä¢ 50MB disk space
‚Ä¢ Understanding of target tools" ;;
        *) echo "No requirements information available" ;;
    esac
}

# Show component help
show_component_help() {
    local component="$1"
    
    local description=$(get_component_description "$component")
    local benefits=$(get_component_benefits "$component")
    local requirements=$(get_component_requirements "$component")
    
    if [ "$description" = "Unknown component" ]; then
        ui_warning "No help available for component: $component"
        return 1
    fi
    
    gum style --border double --margin "1 0" --padding "1 2" --foreground 45 "$description"
    
    echo ""
    gum style --foreground 2 --bold "‚ú® Benefits:"
    echo "$benefits"
    
    echo ""
    gum style --foreground 3 --bold "üìã Requirements:"
    echo "$requirements"
    
    echo ""
    gum style --foreground 6 --bold "üíæ Estimated Size: $(get_component_size "$component")"
    gum style --foreground 6 --bold "‚è±Ô∏è Install Time: $(get_component_install_time "$component")"
    echo ""
}

# Interactive help menu
show_interactive_help() {
    while true; do
        local choice=$(gum choose --header="‚ùì Component Help - Select for details:" \
            "Docker" \
            "Nginx" \
            "PostgreSQL" \
            "Zsh" \
            "Vim" \
            "Development Apps" \
            "Monitoring Tools" \
            "Development Environment" \
            "Development Scripts" \
            "Back to Configuration")
        
        case "$choice" in
            "Docker")
                show_component_help "docker"
                ;;
            "Nginx")
                show_component_help "nginx"
                ;;
            "PostgreSQL")
                show_component_help "psql"
                ;;
            "Zsh")
                show_component_help "zsh"
                ;;
            "Vim")
                show_component_help "vim"
                ;;
            "Development Apps")
                show_component_help "apps"
                ;;
            "Monitoring Tools")
                show_component_help "monitoring"
                ;;
            "Development Environment")
                show_component_help "dev_env"
                ;;
            "Development Scripts")
                show_component_help "scripts"
                ;;
            "Back to Configuration")
                break
                ;;
            *)
                ui_error "Unknown selection: $choice"
                ;;
        esac
        
        if ! gum confirm "View another component?"; then
            break
        fi
    done
}

# Quick help for a component during configuration
show_quick_help() {
    local component="$1"
    
    local description=$(get_component_description "$component")
    if [ "$description" != "Unknown component" ]; then
        gum style --foreground 45 "üí° $description"
        gum style --foreground 6 "Size: $(get_component_size "$component") | Time: $(get_component_install_time "$component")"
    fi
}